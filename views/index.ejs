<!DOCTYPE html>
<html lang="en">

<head>

    <!-- Bootstrap 4.3.1 is working for navbar components and dropdowns, but offcanvas component
    is only available in BS 5.3. So for now, using both. Will eventually upgrade to bootstrap 5.3 -->
    
    <title>The writing app</title>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://kit.fontawesome.com/03adeb66cc.js" crossorigin="anonymous"></script>

    <!-- Bootstrap 4.3.1 CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">

    <!-- Bootstrap 5.3 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Quill CSS -->
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

    <!-- KATEX CSS and JS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css"
        integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js"
        integrity="sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8"
        crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js"
        integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05" crossorigin="anonymous"
        onload="renderMathInElement(document.body);"></script>

    <!-- Google fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Spectral:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="app.css">

</head>

<body class="fullreaderarea">
    <% var displayName=loggedinuser.firstname ? loggedinuser.firstname : loggedinuser.username; %>
        <nav class="navbar navbar-expand-lg navbar-light custom-navbar">
            <a class="navbar-brand mr-auto" href="/homepage">
                <div class="d-flex align-items-center">
                    <div class="mr-2" style="color: var(--color-titletext);">
                        <i class="fa-solid fa-arrow-left-long"></i>
                    </div>
                    <div class="overflow-hidden" style="font-size: smaller; color: var(--color-titletext);">
                        <small>Back</small>
                    </div>
                </div>
            </a>

            <button class="border-0 navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <i class="fas fa-bars" style="color: var(--color-titletext)"></i>
            </button>
            <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
                <ul class="navbar-nav ms-auto mt-2 mt-lg-0">
                    <li class="nav-item"><a class="nav-link"
                            style="margin-right: 15px; color: var(--color-titletext); font-weight: light; font-size: smaller;"
                            href="" id="appPaywallLink" onclick=updatePaywallStatus()><i
                                class="fa-solid fa-dollar-sign"></i><span style="margin-left: 5px;">Monetize</span></a>
                    </li>
                    <li class="nav-item"><a class="nav-link"
                            style="margin-right: 15px; color: var(--color-titletext); font-weight: light; font-size: smaller;"
                            href="#!" id="shareLink" target="_blank"><i class="fa-solid fa-share-nodes"></i><span
                                style="margin-left: 5px;">Share</span></a></li>
                    <li class="nav-item"><a class="nav-link"
                            style="margin-right: 15px; color: var(--color-titletext); font-weight: light; font-size: smaller;"
                            href="/index/createnew" id="createNewLink"><i class="fa-solid fa-plus"></i><span
                                style="margin-left: 5px;">New</span></a></li>
                    <li class="nav-item"><a class="nav-link"
                            style="margin-right: 15px; color: var(--color-titletext); font-weight: light; font-size: smaller;"
                            href="#!" id="editLink"><i class="fa-regular fa-pen-to-square"></i><span
                                style="margin-left: 5px;">Edit</span style="margin-left: 5px;"></a></li>
                    <li class="nav-item"><a class="nav-link"
                            style="margin-right: 15px; color: rgb(230, 12, 96); font-weight: light; font-size: smaller;"
                            href="#!" id="deleteLink"
                            onclick="return confirm('Are you sure you want to delete this blog?')"><i
                                class="fa-regular fa-trash-can"></i><span style="margin-left: 5px;">Delete</span></a>
                    </li>
                </ul>
            </div>

            <button type="button ml-auto" class="btn profile-btn">
                <div class="row no-gutters" style="display: flex; justify-content: center; align-items: center;">
                    <div class="col" style="display: flex; justify-content: center; align-items: center;"
                        onclick="window.location.href='/homepage'">
                        <!-- profile pic ---------------------------------------------------------------->
                        <div class="col">
                            <div class="circle">
                                <span class="initial" style="line-height: 1;">
                                    <%= displayName.charAt(0).toUpperCase() %>
                                </span>
                            </div>
                        </div>
                        <!-- name and email ---------------------------------------------------------->
                        <div class="col">
                            <div class="row no-gutters"
                                style="white-space: nowrap; overflow: hidden; font-size: small;">
                                <div class="col" style="font-weight: bold;">
                                    <%= `${loggedinuser.firstname === undefined ? loggedinuser.username : `${loggedinuser.firstname} ${loggedinuser.lastname}`}` %>
                                </div> 
                            </div>
                            <div class="row no-gutters" style="font-size: smaller;">
                                <div class="col">
                                    <small class="d-block">
                                        <%= `${loggedinuser.email}` %>
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- dropdown menu -------------------------------------------------------------->
                    <div class="col">
                        <div class="dropdown show">
                            <a class="btn dropdown-toggle btn-ptr" href="#" role="button" id="dropdownMenuLink"
                                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            </a>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuLink">
                                <a class="dropdown-item" href="/homepage"><i class="fas fa-home"
                                        style="margin-right: 20px;"></i> Home</a>
                                <a class="dropdown-item" href="/homepage/dashboard"><i class="fa-solid fa-chart-line"
                                        style="margin-right: 20px;"></i> Dashboard</a>
                                <a class="dropdown-item" href="#"><i class="fa-solid fa-sliders"
                                        style="margin-right: 20px;"></i> Settings</a>
                                <div class="dropdown-divider" style="background-color: #d7dbd7;"></div>
                                <a class="dropdown-item" href="/logout"><i class="fa-solid fa-arrow-right-from-bracket"
                                        style="margin-right: 20px;"></i> Logout</a>
                                <div class="dropdown-divider" style="background-color: #d7dbd7;"></div>
                                <div class="dropdown-item">
                                    <div class="color-option" style="--color: white;"></div>
                                    <div class="color-option" style="--color: black;"></div>
                                    <div class="color-option" style="--color: #ecd7c2;"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </button>
        </nav>

        <div class="container-fluid no-gutters">
            <div class="row">

                <!-- Table of contents -->
                <div class="col-md-3 d-none d-md-block" id="toc-container">
                    <h6 class="mt-4" id="tocheader" style="color: var(--color-titletext); font-weight: bolder;">Table of contents
                    </h6>
                    <div id="tableOfContents"></div>
                </div>

                <!-- Article text area -->
                <div class="col-md-9 article-container" id="article-container">
                    <div id="blogheader" class="container-fluid ribbon" style="white-space: normal;"></div>
                    <div class="monetization-banner" id="monetization-banner-id">You have monetized this article. Visit
                        <a href="/homepage/dashboard">Author's Dashboard</a> to customize payout settings.</div>
                    
                    <div id="preview" class="container-fluid mt-4"></div>
                    <br>
                    <div class="tags-container" id="tags-container">
                        <div id="tags" class="container-fluid"></div>
                    </div>
                    <br>

                    <div style="padding: 20px;">
                        <button class="like-button mr-4" id="like-btn-container" type="button" onclick="toggleBlogLike(this)">
                            <i class="fa-regular fa-thumbs-up like-button-icon mr-2"></i>Like
                        </button>
                        <button class="like-button mr-4" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">
                            <i class="fa-regular fa-comment like-button-icon mr-2"></i>Comments
                            <span class="noofcomments ms-1" id="noofcomments"></span>
                        </button>
                    </div>
                    
                    <div class="mt-4 epilogue-banner">
                        <h3>Like what you just read?</h3>
                        <p>Discover more from <%= displayName %></p>
                    </div> 
                    
                    <div class="translucent-mask" id="translucentMask">
                        <div class="center-content text-center" style="padding-right: 20%;">
                            <h3>Unlock a World of Exclusive Content! Start Your 30-Day Trial Today!</h3>
                            <p id="subscribe-banner"></p>
                            <a href="javascript:void(0);" class="btn btn-primary subscribe-button" id="subscribe-button" onclick="authorSubscribe()">Subscribe</a>
                        </div>           
                    </div>

                </div>
            </div>
        </div>

        <!-- Text selection context menu -->
        <div class="contextMenu" id="contextMenu">
            <button class="contextmenuoption-btn" onclick="highlightText()"><i
                    class="fa-solid fa-highlighter"></i></button>
            <button class="contextmenuoption-btn"><i class="fa-solid fa-bullhorn"></i></button>
            <button class="contextmenuoption-btn" onclick="clearHighlight()"><i
                    class="fa-solid fa-trash-can"></i></button>
        </div>

        <!-- Sidebar panel for comments -->
        <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel" style="background-color: #f5f6f7;">
            <div class="offcanvas-header">
                <h5 id="offcanvasRightLabel">Comments</h5>
                <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <!-- Comment input box -->
                <div style="display: flex; flex-direction: column; align-items: end;">
                    <textarea class="form-control comment-input-box" id="comment-box" rows="1" placeholder="Share your thoughts..."></textarea>
                    <div style="display: flex; align-items: end; padding-top: 10px;">
                        <button type="button" class="comment-input-button-cancel me-2" data-bs-dismiss="offcanvas">Cancel</button>
                        <button type="button" class="comment-input-button-reply" onclick="addComment()">Add</button>
                    </div>
                </div>
                <!-- Comments from other users, filled with api -->
                <div>
                    <h5 style="margin-top: 10px; margin-bottom: 10px;">Latest</h5>
                    <div class="commentlist" id="commentlist"></div>
                </div>
            </div>
        </div>

        <!-- JavaScripts and JQuery -->
        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
        
        <script>

            // Initialize Quill for the preview without a toolbar (readOnly)
            var quillpreview = new Quill('#preview', {
                readOnly: true,
                theme: 'snow'
            });

            var previewContainer = document.querySelector('#preview');
            var previewToolbar = previewContainer.previousElementSibling;

            if (previewToolbar && previewToolbar.classList.contains('ql-toolbar')) {
                previewToolbar.parentNode.removeChild(previewToolbar);
            }



            var blogheader = document.getElementById('blogheader');
            var previewDiv = document.getElementById('preview');
            var translucentMask = document.getElementById('translucentMask');
            var subscribebanner = document.getElementById('subscribe-banner');
            const monetizationbanner = document.getElementById("monetization-banner-id");
            const appPaywallLink = document.getElementById('appPaywallLink');
            const tagscontainer = document.getElementById('tags-container');
            const noofcommentsDiv = document.getElementById('noofcomments');
            const markercolor = '#58f04180'

            var blogDetails;
            var bloguserid;
            var blogauthor;
            var loggedinuserid;
            var blogid;
            var selectedrange;
            var headerarray;
            var tocitems;
            var noofcomments = 0;


            document.addEventListener('DOMContentLoaded', function () {
                const urlParams = new URLSearchParams(window.location.search);
                var highlightBlogId = urlParams.get('id');

                if (highlightBlogId !== null && highlightBlogId !== undefined) {
                    loadBlogDetails(highlightBlogId);
                }
            });

            function loadBlogDetails(blogId) {
                tagscontainer.style.display = 'none';
                translucentMask.style.display = 'none';
                monetizationbanner.style.display = 'none';

                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        blogDetails = JSON.parse(xhr.responseText);
                        bloguserid = blogDetails.blog.userid;
                        loggedinuserid = blogDetails.loggedinuserid;
                        blogid = blogDetails.blog._id;
                        updateBlogDetails(blogDetails);

                        if (bloguserid !== loggedinuserid) {
                            document.getElementById('editLink').style.display = 'none';
                            document.getElementById('deleteLink').style.display = 'none';
                            document.getElementById('appPaywallLink').style.display = 'none';
                        } else {
                            document.getElementById('editLink').style.display = 'block';
                            document.getElementById('deleteLink').style.display = 'block';
                            document.getElementById('appPaywallLink').style.display = 'block';
                        }
                    }
                };
                xhr.open('GET', `/index/blogs/${blogId}`, true);
                xhr.send();
            }

            function updateBlogDetails(blogDetails) {

                var editorContent = blogDetails.blog.body;
                const dateObj = new Date(blogDetails.blog.timestamp);
                var timeToread = calculateReadingTime(blogDetails.blog.body, 230);
                const formatString = { month: 'short', day: 'numeric', year: 'numeric' };
                const formattedTime = dateObj.toLocaleString("en-US", formatString).toUpperCase();


                var author = '';
                if (blogDetails.blog.userid === loggedinuserid) {
                    author = 'YOU';
                } else {
                    author = blogDetails.blog.author;
                }

                blogheader.innerHTML = `
                    <h1 class="mt-4 blog-title">${blogDetails.blog.title}</h1>
                    <div class="row" style="display: flex; justify-content: flex-start; align-items: center;">
                        <div class="col" style="flex: 0;">
                            <div class="author-thumbnail">
                                <span class="initial" style="line-height: 1;">${blogDetails.blog.author.charAt(0).toUpperCase()}</span>
                            </div>
                        </div>

                        <div class="col" style="flex: 1;">
                            <h3 style="font-size: 20px; color: #919492">${blogDetails.blog.subtitle}</h3>
                            <div class="ribbon">
                                <p style="display: inline-block; margin-right: 10px;"><i class="fa-regular fa-pen-to-square"></i> ${author}</p>
                                <p style="display: inline-block; margin-right: 10px;"><i class="fa-regular fa-calendar"></i> ${formattedTime}</p>
                                <p style="display: inline-block; margin-right: 10px;"><i class="far fa-clock"></i> ${timeToread}</p>
                                <p id="premium-label" style="display: inline-block; margin-right: 10px;"><i class="fa-solid fa-crown"></i> PREMIUM</p>
                            </div>
                        </div>
                    </div>
                `;

                quillpreview.clipboard.dangerouslyPasteHTML(editorContent);

                generateTableOfContents(editorContent);
                getBlogLikeStatus();
                fetchAndfillComments();

                headerarray = previewDiv.querySelectorAll('h1, h2, h3');

                // Generate nav-bar links for blog update and delete
                var editLink = document.getElementById('editLink');
                if (editLink) {
                    editLink.href = `/index/blogs/${blogDetails.blog._id}/edit`;
                }

                var deleteLink = document.getElementById('deleteLink');
                if (deleteLink) {
                    deleteLink.href = `/index/blogs/${blogDetails.blog._id}/delete`;
                }

                var shareLink = document.getElementById('shareLink');
                if (shareLink) {
                    shareLink.href = `/index/blogs/public/${blogDetails.blog._id}`;
                }

                // Insert tags
                var tags = blogDetails.blog.tags;
                var tagsDiv = document.getElementById('tags');

                if (tags.length > 1) {
                    tagscontainer.style.display = 'block';
                    tagsDiv.style.display = "block";
                    var tagsContainer = document.createElement('div');
                    tagsContainer.classList.add('tags-container');

                    tags.forEach(tag => {
                        var buttonElement = document.createElement('button');
                        buttonElement.type = 'button';
                        buttonElement.classList.add('btn-rounded');
                        buttonElement.disabled = true;
                        buttonElement.textContent = tag;

                        tagsContainer.appendChild(buttonElement);
                    });

                    // Append the container to the tagsDiv
                    tagsDiv.appendChild(tagsContainer);
                } else {
                    tagscontainer.style.display = 'none';
                    tagsDiv.style.display = "none";
                }

                getPaywallStatus();
                applySavedBookmarks(blogid);

            }


            function calculateReadingTime(paragraph, wordsPerMinute) {
                // Assuming an average of 200 words per minute
                const defaultWordsPerMinute = 200;
                const wpm = wordsPerMinute || defaultWordsPerMinute;
                const wordCount = paragraph.split(/\s+/).length;
                const readingTime = Math.ceil(wordCount / wpm);

                return readingTime + ' MIN READ';
            }

            function updatePaywallStatus() {
                const url = `/index/blogs/${blogid}/updatepaywall`;
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        const monetizationbanner = document.getElementById("monetization-banner-id");
                        const appPaywallLink = document.getElementById('appPaywallLink');
                        const premiumicon = document.getElementById('premium-label');
                        const paywallStatus = data.paywallstatus;

                        if (paywallStatus) {
                            if (bloguserid === loggedinuserid) { // display banner only to the blog author
                                appPaywallLink.style.color = '#0F9D58';
                                monetizationbanner.style.display = 'block';
                                premiumicon.style.display = 'none';
                            } else {
                                // paid subscriber should see a 'crown' instead (only if paid subscriber)
                                premiumicon.style.display = 'block';
                                monetizationbanner.style.display = 'none';
                                appPaywallLink.style.color = 'gray';
                            }

                        } else {
                            premiumicon.style.display = 'none';
                            monetizationbanner.style.display = 'none';
                            appPaywallLink.style.color = 'gray';
                        }

                    })
                    .catch(error => {
                        console.error('Error updating paywall status:', error);
                    });
            }


            function getPaywallStatus() {
                const url = `/index/blogs/blog/${blogid}/paywallstatus`;

                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        const paywallStatus = data.paywallstatus;
                        const premiumicon = document.getElementById('premium-label');

                        if (paywallStatus) {
                            appPaywallLink.style.color = '#0F9D58';

                            if (bloguserid === loggedinuserid) { // display monetization banner only to the blog author
                                // don't show translucent mask but show monetization banner
                                translucentMask.style.display = 'none';
                                monetizationbanner.style.display = 'block';
                                premiumicon.style.display = 'none';
                            } else {
                                monetizationbanner.style.display = 'none';
                                premiumicon.style.display = 'block';

                                // show translucent mask based on subscription status.
                                const subscriptioninfo = {
                                    authorid: bloguserid,
                                    loggedinuserid: loggedinuserid
                                };
                                fetch('/index/checksubscription', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ subscriptioninfo }),
                                })
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        var articleContainer = document.getElementById('article-container');
                                        var tocContainer = document.getElementById('toc-container');
                                        if (data.status !== 'subscribed') {
                                            // not subscribed, show translucent mask
                                            var bannermessage = data.bannermessage;
                                            translucentMask.style.display = 'block';
                                            articleContainer.style.height = '100vh'; // Limit body height to one screen height
                                            articleContainer.style.overflow = 'hidden';
                                            tocContainer.style.pointerEvents = 'none'; // disable table of contents links
                                            blogauthor = blogDetails.blog.author; // used in authorSubscribe() call.
                                            var subscribebanner = document.getElementById('subscribe-banner');
                                            subscribebanner.innerText = bannermessage;
                                            return true;
                                        } else {
                                            // subscribed to paywalled article, remove the mask
                                            translucentMask.style.display = 'none';
                                            articleContainer.style.height = 'auto';
                                            articleContainer.style.overflow = 'visible';
                                            tocContainer.style.pointerEvents = 'auto';
                                            monetizationbanner.style.display = 'none';
                                            premiumicon.style.display = 'block';
                                            return true;
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error sending data to server:', error.message);
                                    });
                            }

                        } else {
                            // the blog is not paywalled in the first place. Nothing to hide.
                            const premiumicon = document.getElementById('premium-label');
                            premiumicon.style.display = 'none';
                            translucentMask.style.display = 'none';
                            monetizationbanner.style.display = 'none';
                            appPaywallLink.style.color = 'gray';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching paywall:', error);
                    });
            }

            function authorSubscribe() {
                if (!loggedinuserid || !bloguserid || !blogauthor || !blogid) {
                    console.error('One or more required variables are undefined.');
                    return;
                }

                // send request to subscribe to the user
                const subscriptioninfo = {
                    loggedinuserid: loggedinuserid,
                    authorid: bloguserid
                };

                fetch('/index/addsubscription', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ subscriptioninfo }),
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Response from server from authorSubscribe:', data.status);
                        window.location.href = `/index?id=${blogid}`;
                        
                    })
                    .catch(error => {
                        console.error('Error sending data to server:', error.message);
                    });
            }
            

            function scrollToHeader(index, elem) {
                const previewDiv = document.getElementById('preview');
                const headers = previewDiv.querySelectorAll('h1, h2, h3');
                const toccontainer = document.getElementById('tableOfContents');

                var listItems = document.querySelectorAll('#tableOfContents ul.list-group li');
                listItems.forEach(function (item) {
                    item.style.color = '';
                    item.style.fontWeight = 'normal';
                });
                
                elem.style.color = '#44b84a';
                elem.style.fontWeight = 'bold';

                if (index >= 0 && index < headers.length) {
                    setTimeout(() => {
                        headers[index].scrollIntoView({ behavior: 'auto' });
                    }, 0);
                }
            }

            const articlecc = document.getElementById('article-container');

            articlecc.addEventListener("scroll", function() {
                if(headerarray.length > 0) {
                    headerarray.forEach(function(header, index) {
                        var rect = header.getBoundingClientRect();

                        var listitem = tocitems[index];

                        
                        if (rect.top >= 100 && rect.bottom >= 100) {
                            listitem.style.fontWeight = 'normal';
                            listitem.style.color = '';
                        } else {

                            tocitems.forEach((item) => {
                                item.style.fontWeight = 'normal';
                                item.style.color = '';
                            })

                            listitem.style.fontWeight = 'bold';
                            listitem.style.color = '#44b84a'; 


                            
                        }
                    });
                }

            });

            function compareHeaderTags(headers) {
                const booleanArray = [];

                for (let i = 0; i < headers.length - 1; i++) {
                    const currentTag = parseInt(headers[i].tagName[1]); // Extract the numeric part from the tag name
                    const nextTag = parseInt(headers[i + 1].tagName[1]);

                    booleanArray.push(currentTag < nextTag);
                }

                return booleanArray;
            }


            function generateTableOfContents(htmlString) {
                const tocContainer = document.getElementById('tableOfContents');
                const tocheader = document.getElementById('tocheader');

                if (tocContainer) {
                    const tempContainer = document.createElement('div');
                    tempContainer.innerHTML = htmlString;

                    const headers = tempContainer.querySelectorAll('h1, h2, h3');

                    if (headers.length > 0) {
                        tocheader.style.display = 'block';
                    } else {
                        tocheader.style.display = 'none';
                    }

                    const ul = document.createElement('ul');
                    ul.classList.add('list-group');
                    let currentList = ul;
                    let previousLevel = 1;

                    const hasChild = compareHeaderTags(headers);

                    headers.forEach((header, index) => {

                        const headerLevel = parseInt(header.tagName.charAt(1));
                        const levelDiff = headerLevel - previousLevel;

                        const li = document.createElement('li');
                        li.classList.add('list-group-item');
                        const indicator = document.createElement('span');
                        indicator.classList.add('expand-indicator');

                        if (hasChild[index]) {
                            indicator.innerHTML = '<i class="fa-solid fa-angle-right" style="margin-right: 7px;"></i>';
                        } else {
                            indicator.innerHTML = '';
                        }

                        indicator.onclick = () => toggleChildren(li);

                        const a = document.createElement('a');
                        a.href = 'javascript:void(0);';
                        a.classList.add('text-decoration-none');
                        a.innerHTML = header.textContent;
                        a.onclick = (event) => {
                            event.preventDefault();
                            scrollToHeader(index, li);
                        };

                        li.appendChild(indicator);
                        li.appendChild(a);

                        if (levelDiff > 0) {
                            for (let i = 0; i < levelDiff; i++) {
                                const nestedUl = document.createElement('ul');
                                const indicator = li.querySelector('.expand-indicator');

                                if (nestedUl) {
                                    const isCollapsed = nestedUl.classList.toggle('d-none');
                                    if (hasChild[index] && hasChild[index] !== undefined) {
                                        indicator.innerHTML = isCollapsed ? '<i class="fa-solid fa-angle-right" style="margin-right: 7px;"></i>' : '<i class="fa-solid fa-angle-down" style="margin-right: 7px;"></i>';
                                    } else {
                                        indicator.innerHTML = `<i class="fa-solid fa-angle-right" style="display: none;"></i>`;
                                    }

                                }
                                if (currentList.lastElementChild) {
                                    currentList.lastElementChild.appendChild(nestedUl);
                                    currentList = nestedUl;
                                }

                            }
                        } else if (levelDiff < 0) {
                            for (let i = 0; i < -levelDiff; i++) {
                                if (currentList.parentElement) {
                                    currentList = currentList.parentElement.parentElement;
                                }

                            }
                        }

                        currentList.appendChild(li);
                        previousLevel = headerLevel;
                    });

                    tocContainer.appendChild(ul);
                }
                tocitems = document.querySelectorAll('#tableOfContents ul.list-group li');
            }


            function toggleChildren(parent) {
                const nestedUl = parent.querySelector('ul');
                const indicator = parent.querySelector('.expand-indicator');
                if (nestedUl) {
                    const isCollapsed = nestedUl.classList.toggle('d-none');
                    indicator.innerHTML = isCollapsed ? '<i class="fa-solid fa-angle-right" style="margin-right: 7px;"></i>' : '<i class="fa-solid fa-angle-down" style="margin-right: 7px;"></i>';
                }
            }

            // Highlight and save bookmark

            quillpreview.on('selection-change', function (range, oldRange, source) {
                if (range && range.length > 0) {
                    selectedrange = range;
                } else {
                    //clearAllHighlight();
                }
            });

            // Function to highlight selected text
            function highlightText() {
                if (selectedrange && selectedrange.length > 0) {
                    quillpreview.formatText(selectedrange.index, selectedrange.length, 'background', markercolor);
                    // quillpreview.formatText(selectedrange.index, selectedrange.length, 'color', inkcolor);
                    saveBookmarkToServer(selectedrange);
                    selectedrange = null;
                    const selection = window.getSelection();
                    selection.removeAllRanges();
                }
                const contextMenu = document.getElementById('contextMenu');
                contextMenu.style.display = 'none';
            }

            // Function to clear highlight
            function clearHighlight() {
                if (selectedrange && selectedrange.length > 0) {
                    quillpreview.formatText(selectedrange.index, selectedrange.length, 'background', false);
                    deleteBookmarkFromServer(selectedrange);
                    selectedrange = null;
                    const selection = window.getSelection();
                    selection.removeAllRanges();
                }

            }

            function saveBookmarkToServer(range) {
                const loggedinuserid = `<%= loggedinuser._id %>`;
                const bookmark = {
                    blogid: blogid,
                    index: range.index,
                    length: range.length
                }

                fetch('/savebookmark', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ bookmark: bookmark }),
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Response from server:', data.message);
                    })
                    .catch(error => {
                        console.error('Error saving bookmark to server:', error.message);
                    });
            }

            function deleteBookmarkFromServer(range) {
                const loggedinuserid = `<%= loggedinuser._id %>`;
                const bookmark = {
                    blogid: blogid,
                    index: range.index,
                    length: range.length
                }

                fetch('/deletebookmark', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ bookmark: bookmark }),
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Response from server:', data.message);
                    })
                    .catch(error => {
                        console.error('Error saving bookmark to server:', error.message);
                    });

            }



            function applySavedBookmarks(blogid) {
                // Make a GET request to fetch highlights for the specified blogid
                fetch(`/gethighlights/${blogid}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        // any additional headers if needed
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(bookmarkdata => {
                        console.log(`highlights from server: ${JSON.stringify(bookmarkdata.highlights)}`);

                        if (bookmarkdata.highlights.length > 0) {
                            bookmarkdata.highlights.forEach((highlight) => {
                                quillpreview.formatText(highlight.index, highlight.length, 'background', markercolor);
                                //quillpreview.formatText(highlight.index, highlight.length, 'color', inkcolor);
                            })

                        } else {
                            console.log('no bookmark data found');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching highlights:', error);
                    });

            }

            // Display word context menu using native html text selection api

            document.addEventListener('selectionchange', function () {
                const selection = window.getSelection();
                const selectedText = selection.toString();
                const contextMenu = document.getElementById('contextMenu');

                if (selectedText) {
                    const range = selection.getRangeAt(0);
                    const rect = range.getBoundingClientRect();
                    const scrollY = window.scrollY || window.pageYOffset;
                    contextMenu.style.top = (rect.top + scrollY - 55) + 'px';
                    contextMenu.style.left = (rect.left + rect.width / 2 - 50) + 'px';

                    contextMenu.style.display = 'block';
                } else {
                    contextMenu.style.display = 'none';
                }
            });

            function calculateElapsedTime(formattedDate) {
                var currentDate = new Date();
                var date = new Date(formattedDate);

                var timeDifference = currentDate - date;
                var daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));

                if (daysDifference === 0) {
                    return 'today';
                } else if (daysDifference === 1) {
                    return 'yesterday';
                } else if (daysDifference < 7) {
                    return daysDifference + ' days ago';
                } else {
                    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true, });
                }
            }

            ////////////////////////////////////////////////////////////////////

            function fetchAndfillComments() {
                const queryparams = { blogid };

                fetch('/homepage/index/getcomments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ queryparams }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    noofcomments = data.comments.length;
                    noofcommentsDiv.innerText = `(${noofcomments})`
                    // renderCommentsAndThreads(data.comments);
                    const commentlist = document.getElementById('commentlist');
                    commentlist.innerHTML = ``;
                    commentlist.innerHTML = getFormattedCommentAndThread(data.comments, null, null);
                    getCommentLikeStatuses();
                })
                .catch(error => {
                    console.error('Error fetching comments from server', error.message);
                });
                
            }

            function addComment() { // Main comment on offcanvas.
                const usercomment = document.getElementById('comment-box');
                if(usercomment.value && usercomment.value.trim() !== '') {
                    const comment = usercomment.value;
                    const commentObj = {
                        blogid: blogid,
                        comment: comment,
                        commentedbyuserid: loggedinuserid
                    };
                    fetch('/homepage/index/addcomment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ commentObj }),
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        noofcomments = data.comments.length;
                        noofcommentsDiv.innerText = `(${noofcomments})`
                        // renderCommentsAndThreads(data.comments);
                        const commentlist = document.getElementById('commentlist');
                        commentlist.innerHTML = ``;
                        commentlist.innerHTML = getFormattedCommentAndThread(data.comments, null, null);
                    })

                    .catch(error => {
                        console.error('Error saving comment:', error.message);
                    });
                    usercomment.value = '';
                }
            }

            // This will delete comment as well as reply to a comment.
            function deleteComment(commentid, parentid, grandparentid) {
                console.log(`item to delete: ${commentid}, parentid: ${parentid}`)
                const commentObj = {
                    blogid: blogid,
                    parentid: parentid === '' ? 'null' : parentid,
                    grandparentid: grandparentid === '' ? 'null' : grandparentid,
                    commentid: commentid
                }

                fetch('/homepage/index/deletecomment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ commentObj }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    noofcomments = data.comments.length;
                    noofcommentsDiv.innerText = `(${noofcomments})`
                    const commentlist = document.getElementById('commentlist');
                    commentlist.innerHTML = ``;
                    commentlist.innerHTML = getFormattedCommentAndThread(data.comments, null, null);
                })
                .catch(error => {
                    console.error('Error deleting comment:', error.message);
                });
            }


            function checkDeleteAccess(bloguserid, loggedinuserid, commentedbyuserid) {
                if(bloguserid === loggedinuserid) {
                    return true;
                } else {
                    if(commentedbyuserid === loggedinuserid) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
            

            function addReply(replyboxParent, parentcommentid, grandparentid, clickedCommentBody) {
                const replyBox = replyboxParent.querySelector('#reply-box');
                console.log('grandparentid: ', grandparentid);

                if(replyBox.value && replyBox.value.trim() !== '') {
                    const replyObj = {
                        blogid: blogid,
                        grandparentid: grandparentid === '' ? 'null' : grandparentid,
                        parentcommentid: parentcommentid,
                        replystring: replyBox.value,
                        repliedbyuserid: loggedinuserid
                    };
                    
                    fetch('/homepage/index/addreply', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ replyObj }),
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        removeReplyBox(clickedCommentBody);
                        // renderCommentsAndThreads(data.comments);
                        const commentlist = document.getElementById('commentlist');
                        commentlist.innerHTML = ``;
                        commentlist.innerHTML = getFormattedCommentAndThread(data.comments, null, null);

                    })

                    .catch(error => {
                        console.error('Error adding reply:', error.message);
                    });

                }

            }


            function getFormattedCommentAndThread(comments, parentid, grandparentid) {
                var domArray = [];
                if(comments && comments.length > 0) {
                    comments.forEach((comment) => {
                        domArray.push(buildListItem(comment, null, null));
                        if(comment.replies && comment.replies.length > 0) {
                            comment.replies.forEach((reply) => {
                                domArray.push(buildListItem(reply, comment._id, null));
                                if(reply.reply2Replies && reply.reply2Replies.length > 0) {
                                    reply.reply2Replies.forEach((reply2reply) => {
                                        domArray.push(buildListItem(reply2reply, reply._id, comment._id));
                                    });
                                }
                            });
                        }
                    });
                }
                return domArray.join('');
            }


            function buildListItem(rowObj, parentid, grandparentid) {
                var margin = 0;
                var topborder = '';
                var leftborder = '';
                var gap = '';
                if(parentid === null && grandparentid === null) { // top level comment
                    topborder = '0.4px solid #bbbfbb';
                }
                if(parentid !== null && grandparentid === null) { // top level comment's reply
                    margin=30;
                    leftborder = '4px solid #cdd1cd;'
                    gap = '10px;';
                }
                if(parentid !== null && grandparentid !== null) { // 3rd level comment
                    margin=60;
                    leftborder = '4px solid #cdd1cd;'
                    gap = '10px;';
                }

                var timesince = calculateElapsedTime(rowObj.timestamp);
                const commentedbyuserid = rowObj.commentedbyuserid;
                const imgtxt = rowObj.displayname.charAt(0).toUpperCase();
                const colors = ['red', 'blue', 'green', 'purple', 'orange', 'olive', 'black'];
                var bg = colors[Math.floor(Math.random() * 7)];
                const showCommentMenuOptions = checkDeleteAccess(bloguserid, loggedinuserid, commentedbyuserid);

                const htmlString = `
                <div class="row pt-2" style="padding-left: ${margin}px; border-top: ${topborder}">

                    <div class="col-md-12 comment-body" style="display: flex; flex-direction: column;">
                        
                        <div class="row d-flex align-items-center" style="--bs-gutter-x: 10px;">

                            <div class="col-auto d-flex justify-content-start">
                                <div class="comment-author-thumbnail" style="background-color: ${bg};">
                                    <span style="line-height: 1;">${imgtxt}</span>
                                </div>
                            </div>
                            
                            <div class="col d-flex justify-content-start" style="font-size: small; flex-direction: column;">
                                <div class="fw-bold" style="white-space: nowrap;">${rowObj.displayname} ${rowObj.commentedbyuserid === bloguserid ? `<span class="author-label"> Author</span>` : ''} </div>
                                <span style="font-size: smaller; color: #a1a09d;">${timesince}</span>
                            </div>

                            ${showCommentMenuOptions ? `
                                <div class="col d-flex justify-content-end">
                                    <div class="btn-group">
                                        <button type="button" style="font-size: smaller;" class="btn comment-menu-button" data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false">
                                            <i class="fa-solid fa-ellipsis-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-lg-end">
                                            <li><button class="dropdown-item" type="button" onclick="deleteComment('${rowObj._id}', '${parentid}', '${grandparentid}')">Delete</button></li>
                                        </ul>
                                    </div>
                                </div>
                            ` : ''}

                        </div>

                        <div class="row">
                            <div class="col-12" style="display: flex; flex-direction: column;">
                                <span id="shorttext" style="font-size: smaller; display: none; border-left: ${leftborder} padding-left: ${gap}">${rowObj.comment.slice(0, 200)}... <span class="seemore-btn" onclick="expandText(this.parentNode.parentNode, 'expand')">see more</span></span>
                                <span id="fulltext" style="font-size: smaller; display: none; border-left: ${leftborder} padding-left: ${gap}">${rowObj.comment}<span class="seemore-btn" onclick="expandText(this.parentNode.parentNode, 'collapse')">see less</span></span>
                                ${rowObj.comment.length > 200 ? `<span id="defaulttext" style="font-size: smaller; border-left: ${leftborder} padding-left: ${gap}">${rowObj.comment.slice(0, 200)}... <span class="seemore-btn" onclick="expandText(this.parentNode.parentNode, 'expand')">see more</span>` : `<span id="defaulttext" style="font-size: smaller; border-left: ${leftborder} padding-left: ${gap}">${rowObj.comment}</span>` }
                            </div>
                        </div>

                        <div class="btn-group comment-btn-group mb-2" role="group" aria-label="Basic">
                            <button class="comment-btn-group-icons-small me-4" onclick="toggleCommentLike(this, '${rowObj._id}', '${parentid}', '${grandparentid}')"><i class="fa-regular fa-thumbs-up like-button-icon mr-2"></i>Like</button>
                            <button class="comment-btn-group-icons-small me-4" onclick="toggleReplyBox(this.parentNode.parentNode, '${rowObj._id}', '${parentid}')">${grandparentid === null ? `<i class="fa-regular fa-comment like-button-icon mr-2"></i>Reply` : ''}</button>
                        </div>

                    </div>

                </div>`;

                return htmlString;

            }


            function toggleReplyBox(clickedCommentBody, parentcommentid, grandparentid) {
                if(clickedCommentBody.querySelector('#replyDivContainer') !== null) {
                    removeReplyBox(clickedCommentBody);
                } else {
                    var newHTML = `
                            <div class="container" id="replyDiv" style="padding: 0px !important; margin-bottom: 15px;">
                                <div style="display: flex; flex-direction: column; align-items: end;">
                                    <textarea class="form-control comment-input-box" id="reply-box" rows="1" placeholder="Reply"></textarea>
                                    <div style="display: flex; align-items: end; padding-top: 10px;">
                                        <button type="button" class="comment-input-button-cancel me-2" onclick="removeReplyBox(this.parentNode.parentNode.parentNode.parentNode.parentNode)">Cancel</button>
                                        <button type="button" class="comment-input-button-reply" onclick="addReply(this.parentNode.parentNode, '${parentcommentid}', '${grandparentid}', this.parentNode.parentNode.parentNode.parentNode.parentNode)">Reply</button>
                                    </div>
                                </div>
                            </div>
                        `;

                    var replyDivContainer = document.createElement('div');
                    replyDivContainer.id = 'replyDivContainer';
                    replyDivContainer.innerHTML = newHTML;
                    clickedCommentBody.appendChild(replyDivContainer);
                    clickedCommentBody.style.display = 'block';
                }
            }


            function removeReplyBox(clickedCommentBody) {
                var replyDivContainer = clickedCommentBody.querySelector('#replyDivContainer');
                clickedCommentBody.removeChild(replyDivContainer);
            }

            
            function toggleBlogLike(btnContainer) {

                fetch('/homepage/index/togglelike', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ blogid }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if(data === 'liked') {
                        btnContainer.innerHTML = `<i class="fa-solid fa-thumbs-up like-button-icon mr-2"></i>Unlike`;
                    } else if(data === 'unliked') {
                        btnContainer.innerHTML = `<i class="fa-regular fa-thumbs-up like-button-icon mr-2"></i>Like`;
                    }
                    
                })
                .catch(error => {
                    console.error('Error sending data to server:', error.message);
                });
            }

            function toggleCommentLike(btnContainer, commentid, parentid, grandparentid) {

                fetch('/homepage/index/togglecommentlike', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ blogid, commentid, parentid, grandparentid }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if(data === 'liked') {
                        btnContainer.innerHTML = `<i class="fa-solid fa-thumbs-up like-button-icon mr-2"></i>Unlike`;
                    } else if(data === 'unliked') {
                        btnContainer.innerHTML = `<i class="fa-regular fa-thumbs-up like-button-icon mr-2"></i>Like`;
                    }
                })
                .catch(error => {
                    console.error('Error sending data to server:', error.message);
                });
            }


            function getBlogLikeStatus() {
                var btnContainer = document.getElementById('like-btn-container');
                fetch('/homepage/index/getlikestatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ blogid }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if(data === 'liked') {
                        btnContainer.innerHTML = `<i class="fa-solid fa-thumbs-up like-button-icon mr-2"></i>Unlike`;
                    } else if(data === 'unliked') {
                        btnContainer.innerHTML = `<i class="fa-regular fa-thumbs-up like-button-icon mr-2"></i>Like`;
                    }
                    
                })
                .catch(error => {
                    console.error('Error fetching like status:', error.message);
                });
            }

            function getCommentLikeStatuses() {

                fetch('/homepage/index/getcommentlikestatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ blogid }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {

                    console.log(JSON.stringify(data));

                    data.forEach((like) => {
                        const commentid = like.commentid;
                        const parentid = like.parentid;
                        const grandparentid = like.grandparentid;

                        const onclickAttributeValue = "toggleCommentLike(this, \'" + commentid + "\', \'" + parentid + "\', \'" + grandparentid + "\')";
                        const targetElement = document.querySelector(`button[onclick*="${onclickAttributeValue}"]`);

                        console.log(onclickAttributeValue);
                        console.log(targetElement);

                        if (targetElement) {
                            targetElement.innerHTML = `<i class="fa-solid fa-thumbs-up like-button-icon mr-2" aria-hidden="true"></i>Unlike`;
                        } else {
                            targetElement.innerHTML = `<i class="fa-regular fa-thumbs-up like-button-icon mr-2" aria-hidden="true"></i>Like`;
                        }
                    });
                    
                })
                .catch(error => {
                    console.error('Error fetching like status:', error.message);
                });

            }


            function expandText(commentContainer, flag) {
                const shortTextDiv = commentContainer.querySelector('#shorttext');
                const fullTextDiv = commentContainer.querySelector('#fulltext');
                const defaultTextDiv = commentContainer.querySelector('#defaulttext');
                defaultTextDiv.style.display = 'none';
                
                if(flag === 'expand') {
                    shortTextDiv.style.display = 'none';
                    fullTextDiv.style.display = 'block';
                } else {
                    shortTextDiv.style.display = 'block';
                    fullTextDiv.style.display = 'none';
                }
                           
            }



        </script>

        <script type="module" src="themeswitcher.js"></script>
</body>

</html>