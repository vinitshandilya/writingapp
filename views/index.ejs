<!DOCTYPE html>
<html lang="en">
   <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" crossorigin="anonymous">
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
      <title>The writing app</title>
      <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
      <link href="indexpage.css" rel="stylesheet">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" crossorigin="anonymous">
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Hedvig+Letters+Serif:opsz@12..24&display=swap" rel="stylesheet">
      <style>
         a {
         color: #1c4175;
         }
         .custom-navbar {
         padding-left: 10px;
         padding-right: 10px;
         border-bottom: 1px solid rgb(208, 203, 203);
         }
         .profile-btn {
         text-align: left;
         display: flex;
         flex-direction: column;
         align-items: flex-start;
         background-color: transparent;
         color: #1c4175;
         border: none;
         }
         .profile-btn:hover, .btn-ptr {
         background-color: transparent;
         color: #1c4175;
         border: none;
         }
         .profile-btn:focus,
         .profile-btn:active,
         .btn-ptr:focus,
         .btn-ptr:active {
         border: none;
         outline: none;
         box-shadow: none;
         }
         .circle {
         width: 40px; /* Adjust the size of the circle as needed */
         height: 40px;
         background-color: #1c4175; /* Set the color of the circle */
         border-radius: 50%;
         display: flex;
         justify-content: center;
         align-items: center;
         color: white; /* Text color */
         font-size: 20px; /* Adjust the font size as needed */
         font-weight: bold; /* Adjust the font weight as needed */
         }
         .dropdown-menu {
         border:1px solid rgb(208, 203, 203);
         border-radius: 5px;
         box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
         }
         .dropdown-item {
         font-size: small;
         color: gray;
         }
         .btn-primary {
         background-color: transparent;
         border-color: #4287f5;
         color: #4287f5;
         }
         .btn-primary:hover {
         background-color: #1c4175;
         border-color: #1c4175;
         color: #fff;
         }
         .btn-rounded {
         display: inline-block;
         border-radius: 15px;
         background-color: #1c4175;
         color: #fff;
         border: none;
         box-shadow: none;
         font-size: smaller;
         padding: 10 20px;
         margin-right: 5px;
         }
         .ql-footnote {
         color: #999;
         }
         .ql-footnote {
         position: relative;
         cursor: help;
         }
         .ql-footnote:hover::after {
         content: attr(fntitle);
         display: block;
         position: absolute;
         left: 100%;
         top: 0;
         width: 600px;
         max-width: 300px;
         white-space: normal;
         word-wrap: break-word;
         padding: 0.5em;
         background: #ffffff;
         border: 1px solid #d7d0d0;
         box-shadow: 2px 2px 5px rgba(41, 41, 41, 0.2);
         z-index: 1;
         border-radius: 15px;
         font-size: 13px;
         color: #333;
         line-height: 1.4;
         }
         #footnoteList {
         margin-top: auto; /* Push to the bottom */
         list-style-type: none; /* Remove bullet points */
         padding: 0;
         }
         #footnoteList li {
         padding-left: 0px;
         font-size: 15px;
         font-family: 'Times New Roman', Times, serif;
         color: #585858;
         }
         .canvas {
         /* font-family: 'Hedvig Letters Serif', serif; */
         line-height: 2.0;
         }
         .navbar {
         padding-left: 20px;
         padding-right: 20px;
         font-weight: bold;
         }
         .blog-title {
         color: #1c4175;
         }
         .ribbon-area {
         color: #1c4175;
         }
         #bookmark-icon {
         display: none;
         position: absolute;
         right: 10px;
         top: 50%;
         transform: translateY(-50%);
         font-size: 24px;
         color: #1c4175;
         cursor: pointer;
         }
         .tags-container {
         display: inline-block;
         padding: 0px 10px;
         }
         .monetization-banner {
         padding: 15px;
         margin-bottom: 20px;
         border: 1px solid #b0c9eb;
         background-color: rgba(78, 149, 241, 0.2); /* #0F9D58 with 70% transparency */
         border-color: #1c4175; /* Border color to match */
         /* color: #fff; */
         border-radius: 5px;
         }
         .translucent-mask {
         display: none;
         position: fixed;
         top: 0vh;
         left: 0;
         width: 100%;
         height: 100vh;
         background-color: rgba(255, 255, 255, 0.5);
         backdrop-filter: blur(10px);
         display: flex;
         justify-content: center;
         align-items: center;
         }
         .center-content {
         text-align: center;
         }
         .custom-resizable-image {
         width: 700px;
         height: auto;
         object-fit: contain;
         }
         .navbar-toggler:focus,
         .navbar-toggler:active,
         .navbar-toggler-icon:focus {
         outline: none;
         box-shadow: none;
         }
         .navbar-toggler {
         border: none;
         }
      </style>
   </head>
   <body>
      <body>
         <% var displayName = loggedinuser.firstname ? loggedinuser.firstname : loggedinuser.username; %>
         <nav class="navbar navbar-expand-lg navbar-light custom-navbar">
            <a class="navbar-brand mr-auto" href="/homepage">
               <div class="d-flex align-items-center">
                  <div class="mr-2" style="color: #1c4175;">
                     <i class="fa-solid fa-arrow-left-long"></i>
                  </div>
                  <div class="overflow-hidden" style="font-size: smaller; color: #1c4175;">
                     <small>Back</small>
                  </div>
               </div>
            </a>
            <button class="border-0 navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <i class="fas fa-bars" style="color: #1c4175;"></i>
            </button>
            <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
               <ul class="navbar-nav ms-auto mt-2 mt-lg-0">
                  <li class="nav-item"><a class="nav-link" style="margin-right: 15px; color: #1c4175; font-weight: lighter; font-size: smaller;" href="" id="appPaywallLink" onclick=updatePaywallStatus()><i class="fa-solid fa-dollar-sign"></i><span style="margin-left: 5px;">Monetize</span></a></li>
                  <li class="nav-item"><a class="nav-link" style="margin-right: 15px; color: #1c4175; font-weight: lighter; font-size: smaller;" href="#!" id="shareLink" target="_blank"><i class="fa-solid fa-share-nodes"></i><span style="margin-left: 5px;">Share</span></a></li>
                  <li class="nav-item"><a class="nav-link" style="margin-right: 15px; color: #1c4175; font-weight: lighter; font-size: smaller;" href="/index/createnew" id="createNewLink"><i class="fa-solid fa-plus"></i><span style="margin-left: 5px;">New</span></a></li>
                  <li class="nav-item"><a class="nav-link" style="margin-right: 15px; color: #1c4175; font-weight: lighter; font-size: smaller;" href="#!" id="editLink"><i class="fa-regular fa-pen-to-square"></i><span style="margin-left: 5px;">Edit</span style="margin-left: 5px;"></a></li>
                  <li class="nav-item"><a class="nav-link" style="margin-right: 15px; color: rgb(230, 12, 96); font-weight: lighter; font-size: smaller;" href="#!" id="deleteLink" onclick="return confirm('Are you sure you want to delete this blog?')"><i class="fa-regular fa-trash-can"></i><span style="margin-left: 5px;">Delete</span></a></li>
               </ul>
            </div>
            <button type="button ml-auto" class="btn profile-btn">
               <div class="row no-gutters" style="display: flex; justify-content: center; align-items: center;">
                  <div class="col" style="display: flex; justify-content: center; align-items: center;" onclick="window.location.href='/homepage'">
                     <!-- profile pic ---------------------------------------------------------------->
                     <div class="col">
                        <div class="circle">
                           <span class="initial" style="line-height: 1;"><%= displayName.charAt(0).toUpperCase() %></span>
                        </div>
                     </div>
                     <!-- name and email ---------------------------------------------------------->
                     <div class="col">
                        <div class="row no-gutters" style="white-space: nowrap; overflow: hidden; font-size: small;">
                           <div class="col" style="font-weight: bold;">
                              <%= `${loggedinuser.firstname} ${loggedinuser.lastname}` %>
                           </div>
                        </div>
                        <div class="row no-gutters" style="font-size: smaller;">
                           <div class="col">
                              <small class="d-block"><%= `${loggedinuser.email}` %></small>
                           </div>
                        </div>
                     </div>
                  </div>
                  <!-- dropdown menu -------------------------------------------------------------->
                  <div class="col">
                     <div class="dropdown show">
                        <a class="btn dropdown-toggle btn-ptr" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        </a>
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuLink">
                           <a class="dropdown-item" href="/homepage">Home</a>
                           <a class="dropdown-item" href="/homepage/dashboard">Dashboard</a>
                           <a class="dropdown-item" href="#">Settings</a>
                           <div class="dropdown-divider"></div>
                           <a class="dropdown-item" href="/logout">Logout</a>
                        </div>
                     </div>
                  </div>
               </div>
            </button>
         </nav>
         <div class="container-fluid">
            <div class="row">
               <div class="col-md-6 mx-auto">
                  <div id="blogheader" class="container-fluid ribbon-area"></div>
                  <div class="monetization-banner" id="monetization-banner-id">You have monetized this article. Visit <a href="/homepage/dashboard">Author's Dashboard</a> to customize payout settings.</div>
                  <div id="preview" class="container-fluid canvas"></div>
                  <br>
                  <div class="tags-container" id="tags-container">
                     <div id="tags" class="container-fluid"><i class="fa-solid fa-tags"></i></div>
                     <br>
                     <hr>
                  </div>
                  <div id="bookmark-icon">&#128278;</div>
                  <ul id="footnoteList"></ul>
                  <br>
               </div>
            </div>
         </div>
         <div class="translucent-mask" id="translucentMask">
            <div class="center-content">
               <p id="subscribe-banner">This is a paid article.</p>
               <a href="#!" class="btn btn-primary" id="subscribe-button" onclick=authorSubscribe()>Subscribe</a>
            </div>
         </div>
         <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
         <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
         <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
         <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
         <!-- Bootstrap core JS-->
         <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
         <!-- Core theme JS-->
         <script src="script.js"></script>
         <script>
            var blogheader = document.getElementById('blogheader');
            var previewDiv = document.getElementById('preview');
            var translucentMask = document.getElementById('translucentMask');
            var subscribebanner = document.getElementById('subscribe-banner');
            const monetizationbanner = document.getElementById("monetization-banner-id");
            const appPaywallLink = document.getElementById('appPaywallLink');
            const tagscontainer = document.getElementById('tags-container');
            
            var markedUpDom;
            var blogDetails;
            var bloguserid;
            var blogauthor;
            var loggedinuserid;
            var blogid;
            
            document.addEventListener('DOMContentLoaded', function () {
                const urlParams = new URLSearchParams(window.location.search);
                var highlightBlogId = urlParams.get('id');
            
                if (highlightBlogId !== null && highlightBlogId !== undefined) {
                    loadBlogDetails(highlightBlogId);
                } 
            });
            
            function loadBlogDetails(blogId) {
                tagscontainer.style.display = 'none';
                translucentMask.style.display = 'none';
                monetizationbanner.style.display = 'none';
            
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        blogDetails = JSON.parse(xhr.responseText);
                        bloguserid = blogDetails.blog.userid;
                        loggedinuserid = blogDetails.loggedinuserid;
                        blogid = blogDetails.blog._id;
                        updateBlogDetails(blogDetails);
            
                        if (bloguserid !== loggedinuserid) {
                            document.getElementById('editLink').style.display = 'none';
                            document.getElementById('deleteLink').style.display = 'none';
                            document.getElementById('appPaywallLink').style.display = 'none';
                        } else {
                            document.getElementById('editLink').style.display = 'block';
                            document.getElementById('deleteLink').style.display = 'block';
                            document.getElementById('appPaywallLink').style.display = 'block';
                        }
                    }
                };
                xhr.open('GET', `/index/blogs/${blogId}`, true);
                xhr.send();
            }
            
            function updateBlogDetails(blogDetails) {
            
                var editorContent = blogDetails.blog.body;
                const dateObj = new Date(blogDetails.blog.timestamp);
                var timeToread = calculateReadingTime(blogDetails.blog.body, 230);
                const formatString = { month: 'short', day: 'numeric', year: 'numeric' };
                const formattedTime = dateObj.toLocaleString("en-US", formatString).toUpperCase();
                markedUpDom = recomputeRender(editorContent); // This is where we decide to parse footnotes, bookmarks, etc.
            
                var author = '';
                if(blogDetails.blog.userid === loggedinuserid) {
                    author = 'YOU';
                } else {
                    author = blogDetails.blog.author;
                }
            
                blogheader.innerHTML = `
                    <h1 class="mt-4 blog-title">${blogDetails.blog.title}</h1>
                    <p style="font-size: 22px; color: #686868">${blogDetails.blog.subtitle}</p>
                    <div>
                        <p style="font-size: smaller; display: inline-block; margin-right: 10px;"><i class="fa-regular fa-pen-to-square"></i> ${author}</p>
                        <p style="font-size: smaller; display: inline-block; margin-right: 10px;"><i class="fa-regular fa-calendar"></i> ${formattedTime}</p>
                        <p style="font-size: smaller; display: inline-block; margin-right: 10px;"><i class="far fa-clock"></i> ${timeToread}</p>
                        <p id="premium-label" style="font-size: smaller; display: inline-block; margin-right: 10px;"><i class="fa-solid fa-crown"></i></i> PREMIUM</p>
                    </div> `;
            
                previewDiv.innerHTML = `
                    <div><p>${markedUpDom}</p></div>
                `;
            
                // Parse footnotes markup and add to page
                var footnotes = listFootnotes(markedUpDom);
                if(footnotes.length > 0) {
                    var footnoteList = document.getElementById('footnoteList');
                    var heading = document.createElement('h4');
                    heading.innerText = 'Footnotes';
                    heading.style.fontWeight = 'bold';
                    heading.style.color = '#1c4175';
                    footnoteList.appendChild(heading);
            
                    footnotes.forEach(function (footnote) {
                        var listItem = document.createElement('li');
                        listItem.textContent = footnote;
                        footnoteList.appendChild(listItem);
                    });
                }
            
                // Generate nav-bar links for blog update and delete
                var editLink = document.getElementById('editLink');
                if (editLink) {
                    editLink.href = `/index/blogs/${blogDetails.blog._id}/edit`;
                }
            
                var deleteLink = document.getElementById('deleteLink');
                if (deleteLink) {
                    deleteLink.href = `/index/blogs/${blogDetails.blog._id}/delete`;
                }
            
                var shareLink = document.getElementById('shareLink');
                if (shareLink) {
                    shareLink.href = `/index/blogs/public/${blogDetails.blog._id}`;
                }
            
                // Insert tags
                var tags = blogDetails.blog.tags;
                var tagsDiv = document.getElementById('tags');
            
                if (tags.length > 1) {
                    tagscontainer.style.display = 'block';
                    tagsDiv.style.display = "block";
                    var tagsContainer = document.createElement('div');
                    tagsContainer.classList.add('tags-container');
            
                    tags.forEach(tag => {
                        var buttonElement = document.createElement('button');
                        buttonElement.type = 'button';
                        buttonElement.classList.add('btn-rounded');
                        buttonElement.disabled = true;
                        buttonElement.textContent = tag;
            
                        tagsContainer.appendChild(buttonElement);
                    });
            
                    // Append the container to the tagsDiv
                    tagsDiv.appendChild(tagsContainer);
                } else {
                    tagscontainer.style.display = 'none';
                    tagsDiv.style.display = "none";
                }
            
                getPaywallStatus();
                // maskUnmaskBlog(bloguserid, loggedinuserid);
            }
            
            // parse footnote markup and return updated html string
            function recomputeRender(domstr) {
                var counter = 1;
                var regex = /\[\^(.*?)\]/g; // Capture the text inside `[^]` using capturing group
                previewContent = domstr.replace(regex, function(match, customFootnote) {
                    return `
                        <span class="ql-footnote" fntitle="${customFootnote}">
                            <sub>
                                <a href="your-link-url">[${(counter++)}]</a>
                            </sub>
                        </span>
                        `;
                });
            
                return previewContent;
            }
            
            
            function calculateReadingTime(paragraph, wordsPerMinute) {
                // Assuming an average of 200 words per minute
                const defaultWordsPerMinute = 200;
                const wpm = wordsPerMinute || defaultWordsPerMinute;
                const wordCount = paragraph.split(/\s+/).length;
                const readingTime = Math.ceil(wordCount / wpm);
            
                return readingTime + ' MIN READ';
            }
            
            function listFootnotes(domstr) {
            
                const parser = new DOMParser();
                const document = parser.parseFromString(domstr, "text/html");
            
                const footnotes = [];
                const footnoteElements = document.querySelectorAll('.ql-footnote');
            
                for (const element of footnoteElements) {
                    console.log(element);
                    const footnote_index = element.textContent.replace(/\[|\]/g, '');
                    const fntitle = element.getAttribute('fntitle');
            
                    if (fntitle) {
                        footnotes.push(`${footnote_index} ${fntitle}`);
                    }
                }
            
                return footnotes;
            }
            
            function updatePaywallStatus() {
                const url = `/index/blogs/${blogid}/updatepaywall`;
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        const monetizationbanner = document.getElementById("monetization-banner-id");
                        const appPaywallLink = document.getElementById('appPaywallLink');
                        const premiumicon = document.getElementById('premium-label');
                        const paywallStatus = data.paywallstatus;
            
                        if(paywallStatus) {
                            if(bloguserid === loggedinuserid) { // display green banner only to the blog author
                                appPaywallLink.style.color = '#0F9D58';
                                monetizationbanner.style.display = 'block';
                                premiumicon.style.display = 'none';
                            } else {
                                // paid subscriber should see a 'crown' instead (only if paid subscriber)
                                premiumicon.style.display = 'block';
                                monetizationbanner.style.display = 'none';
                                appPaywallLink.style.color = '';
                            }
                            
                        } else {
                            premiumicon.style.display = 'none';
                            monetizationbanner.style.display = 'none';
                            appPaywallLink.style.color = '';
                        }
                        
                    })
                    .catch(error => {
                        console.error('Error updating paywall status:', error);
                    });
            }
            
            
            function getPaywallStatus() {
                const url = `/index/blogs/blog/${blogid}/paywallstatus`;
            
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        const paywallStatus = data.paywallstatus;
                        const premiumicon = document.getElementById('premium-label');
                        
                        if(paywallStatus) {
                            console.log('paywalled article');
                            appPaywallLink.style.color = '#0F9D58';
            
                            if(bloguserid === loggedinuserid) { // display green banner only to the blog author
                                // don't show translucent mask but show monetization banner
                                translucentMask.style.display = 'none';
                                monetizationbanner.style.display = 'block';
                                premiumicon.style.display = 'none';
                            } else {  
                                monetizationbanner.style.display = 'none';
                                premiumicon.style.display = 'block';
                                
                                // show translucent mask based on subscription status.
                                const subscriptioninfo = {
                                    authorid: bloguserid,
                                    loggedinuserid: loggedinuserid
                                };
                                fetch('/index/checksubscription', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ subscriptioninfo }),
                                })
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    console.log('Response from server:', data.status);
            
                                    if(data.status !== 'subscribed') {
                                        // not subscribed, show translucent mask
                                        translucentMask.style.display = 'flex';
                                        blogauthor = blogDetails.blog.author;
                                        var subscribebanner = document.getElementById('subscribe-banner');
                                        subscribebanner.innerText = `This is a paid article. Subscribe to ${blogDetails.blog.author} for full access!`;
                                        return true;
                                    } else {
                                        // subscribed to paywalled article
                                        translucentMask.style.display = 'none';
                                        monetizationbanner.style.display = 'none';
                                        premiumicon.style.display = 'block';
                                        return true;
                                    }
                                    
                                })
                                .catch(error => {
                                    console.error('Error sending data to server:', error.message);
                                });
                            }
                            
                        } else {
                            // the blog is not paywalled in the first place. Nothing to hide.
                            console.log('Not paywalled article');
                            const premiumicon = document.getElementById('premium-label');
                            premiumicon.style.display = 'none';
                            translucentMask.style.display = 'none';
                            monetizationbanner.style.display = 'none';
                            appPaywallLink.style.color = '';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching paywall:', error);
                    });
            }
            
            function authorSubscribe() {
                if (!loggedinuserid || !bloguserid || !blogauthor || !blogid) {
                    console.error('One or more required variables are undefined.');
                    return;
                }
            
                console.log(`${loggedinuserid} will subscribe to ${bloguserid}, author name: ${blogauthor}, redirect blogid: ${blogid}`);
                
                // send request to subscribe user
                const subscriptioninfo = {
                    loggedinuserid: loggedinuserid,
                    authorid: bloguserid
                };
            
                fetch('/index/addsubscription', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ subscriptioninfo }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response from server from authorSubscribe:', data.status);
                    window.location.href = `/index?id=${blogid}`;
                })
                .catch(error => {
                    console.error('Error sending data to server:', error.message);
                    // Handle the error as needed
                }); 
            }
            
            
         </script>
   </body>
</html>