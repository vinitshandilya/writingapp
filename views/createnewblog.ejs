<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://kit.fontawesome.com/03adeb66cc.js" crossorigin="anonymous"></script>
  <title>The writing app</title>

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Hedvig+Letters+Serif:opsz@12..24&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js" integrity="sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8" crossorigin="anonymous"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js" integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05" crossorigin="anonymous"
        onload="renderMathInElement(document.body);"></script>

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Source+Serif+4:opsz,wght@8..60,300&display=swap" rel="stylesheet">
        

  <style>

    .custom-navbar {
        position: sticky;
        top: 0;
        z-index: 1000;
         padding-left: 20px;
         padding-right: 20px;
         border-bottom: 1px solid rgb(208, 203, 203);
         background-color: #faebd4;
         color: black !important;
    }

    .ql-toolbar {
        border: none !important;
        box-shadow: none !important;
        outline: none !important;
    }

    .ql-snow, .ql-stroke {
        stroke: #000 !important;
        /* stroke-width: 1 !important; */
    }

    .ql-editor {
        border: none !important;
        box-shadow: none !important;
        outline: none !important;
        min-height: 60vh;
        max-height: none;
        height: auto !important;
        overflow-y: hidden;
        font-size: medium;
        font-family: 'Source Serif 4', serif;
        padding: 0;
    }

    .ql-container {
        border: none !important;
        box-shadow: none !important;
        outline: none !important;
        max-height: none;
        height: auto !important;
        overflow-y: hidden;
        font-size: medium;
        font-family: 'Source Serif 4', serif;
        padding: 0;
    }

    .custom-textarea-title {
        border: none;
        resize: none;
        font-size: 35px;
        font-weight: bolder;
        padding-inline-start: 0px !important;
    }

    .custom-textarea-title::placeholder {
        border: none;
        resize: none;
        font-size: 35px;
        font-weight: bold;
        color: rgb(179, 173, 173);
    }

    .custom-textarea-title:focus {
        border:none;
        box-shadow:none;
        outline: none !important;
    }

    .custom-textarea-subtitle {
        border: none;
        resize: none;
        font-size: 20px;
        padding-inline-start: 0px !important;
    }

    .custom-textarea-subtitle::placeholder {
        border: none;
        resize: none;
        font-size: 20px;
        color: rgb(179, 173, 173);
    }

    .custom-textarea-subtitle:focus {
        border:none;
        box-shadow:none;
        outline: none !important;
    }

    .custom-textarea-tags {
        border: none;
        resize: none;
        font-size: 15px;
    }
            
    .custom-textarea-tags::placeholder {
        border: none;
        resize: none;
        font-size: 15px;
    }

    .custom-textarea-tags:focus {
        border:none;
        box-shadow:none;
        outline: none !important;
    }

    .btn-success {
        background-color: #1c4175;
        border-color: #1c4175;
    }

    .btn-primary {
        background-color: #4287f5;
        border-color: #4287f5;
    }

    .btn-primary:hover {
        background-color: #1c4175;
        border-color: #1c4175;
        color: #fff;
    }

    .btn-secondary {
        background-color: transparent;
        border-color: #1c4175;
        color: #1c4175;
    }

    .btn-success:hover,
    .btn-success:focus {
        background-color: #1c4175;
        border-color: #1c4175;
        color: #fff;
    }

    #preview {
        margin-top: 20px;
    }

    .hidden {
        display: none;
    }

    .image-container {
      padding: 10px;
    }

    #display-preview-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 1;
      width: 3;
      margin: 0 5px; /* Adjust the margin as needed */
    }

    .modal-full .modal-dialog {
     max-width: 90%;
    }

    .ql-placeholder {
     padding-left: 0px !important;
    }

  </style>

</head>
<body>

    <nav class="navbar navbar-expand-lg navbar-light custom-navbar fixed-top">
        <div id="toolbar" class="container-fluid d-flex justify-content-center">
            <!-- Add font size dropdown -->
            <select class="ql-size">
                <option value="small"></option>
                <!-- Note a missing, thus falsy value, is used to reset to default -->
                <option selected></option>
                <option value="large"></option>
                <option value="huge"></option>
            </select>
    
            <!--['bold', 'italic', 'underline', 'strike']-->
            <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
            </span>
    
            <!-- Add blockquote button -->
            <span class="ql-formats">
                <button class="ql-blockquote"></button>
                <button class="ql-code-block"></button>
                <button class="ql-code"></button>
            </span>
    
            <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
                <button class="ql-indent" value="-1"></button>
                <button class="ql-indent" value="+1"></button>
                <button class="ql-direction" value="rtl"></button>
                <button class="ql-align" value=""></button>
                <button class="ql-align" value="center"></button>
                <button class="ql-align" value="right"></button>
                <button class="ql-align" value="justify"></button>
            </span>
            
            <span class="ql-formats">
                <button class="ql-script" value="sub"></button>
                <button class="ql-script" value="super"></button>
            </span>
      
            <span class="ql-formats">
                <select class="ql-header">
                  <option value="1"></option>
                  <option value="2"></option>
                  <option value="3"></option>
                  <option value="4"></option>
                  <option value="5"></option>
                  <option value="6"></option>
                  <option selected></option>
                </select>
            </span>
    
            <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
            </span>
    
            <span class="ql-formats">
                <select class="ql-font">
                    <option value="sans-serif">Sans Serif</option>
                    <option value="serif">Serif</option>
                    <option value="monospace">Monospace</option>
                </select>
            </span>
    
            <span class="ql-formats">
                <button class="ql-image"></button>
                <button id="figcaption-btn"><i class="fa-solid fa-hashtag"></i></button>
                <button class="ql-video"></button>
                <button class="ql-formula"></button>
                <button class="ql-link"></button>
            </span>
            
    
            <span class="ql-formats">
                <button class="ql-clean"></button>
                <button id="display-preview-btn"><i class="fa-regular fa-eye"></i></button>
            </span>

          </div>
     
    </nav>

    

    <div class="container-fluid mt-5">
        <div class="row">

            <div class="col-8 mx-auto">

                <% if (blog !== 'undefined' && blog !== null) { %>
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-title" id="title" name="title" rows="1" placeholder="Title"><%= blog.title %></textarea>
                    </div>
        
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-subtitle" id="subtitle" name="subtitle" rows="1" placeholder="SubTitle"><%= blog.subtitle %></textarea>
                    </div>

        
                    <div class="editor" id="editor"><%- blog.body || '' %></div>
        
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-tags" id="tags" name="tags" rows="1" placeholder="Add comma separated tags (Optional)"><%= blog.tags && blog.tags.length > 0 ? blog.tags.join(', ') : '' %></textarea>
                    </div>
        
                    <button type="button" class="btn btn-success" onclick="saveBlog(true, '<%= blog.id %>')">Publish Changes</button>
        
                    <button type="button" class="btn btn-secondary" onclick="cancel('<%= blog.id %>')">Cancel</button>


                <% } else { %>
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-title" id="title" name="title" rows="1" placeholder="Title"></textarea>
                    </div>
        
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-subtitle" id="subtitle" name="subtitle" rows="1" placeholder="SubTitle"></textarea>
                    </div>

                    
        
                    <div class="editor" id="editor"></div>
        
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-tags" id="tags" name="tags" rows="1" placeholder="Add comma separated tags (Optional)"></textarea>
                    </div>
        
                    <button type="button" class="btn btn-success" onclick="saveBlog(false, '')">Publish</button>
        
                    <button type="button" class="btn btn-secondary" onclick="cancel('')">Cancel</button>

                <% } %>
        </div>
    </div>

    <!-- Preview modal -->

    <div class="modal fade" id="previewModal" tabindex="-1" role="dialog" aria-labelledby="previewModalTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="previewModalTitle"></h5>
            </div>
            <div class="modal-body">
              <div class="col-md-10 mx-auto">
                    <div class="preview" id="preview"></div>
              </div>
            </div>
            <!-- <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary">Save changes</button>
            </div> -->
          </div>
        </div>
      </div>


  <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>


  <script>

    // Initialize Quill for the preview without a toolbar (readOnly)
    var quillpreview = new Quill('#preview', {
        readOnly: true,
        theme: 'snow',
    });

    var previewContainer = document.querySelector('#preview');
    var previewToolbar = previewContainer.previousElementSibling;

    if (previewToolbar && previewToolbar.classList.contains('ql-toolbar')) {
        previewToolbar.parentNode.removeChild(previewToolbar);
    }


    // var toolbarOptions = [
    //     ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
    //     ['blockquote', 'code-block', 'code'],

    //     //[{ 'header': 1 }, { 'header': 2 }],               // custom button values
    //     [{ 'list': 'ordered'}, { 'list': 'bullet' }],
    //     [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
    //     [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
    //     [{ 'direction': 'rtl' }],                         // text direction

    //     // [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
    //     [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

    //     [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
    //     [{ 'font': [] }],
    //     [{ 'align': [] }],

    //     ['clean'],                                         // remove formatting button

    //     ['link', 'image', 'video', 'formula'] 
    // ];



    var quill = new Quill('#editor', {
        modules: {
            // toolbar: toolbarOptions
            toolbar: '#toolbar'
        },
        theme: 'snow',
        placeholder: 'Start writing...',
    });

    var previewBtn = document.querySelector('#display-preview-btn');
    previewBtn.addEventListener('click', function() {
        var previewTitle = document.getElementById('previewModalTitle');
        const title = document.getElementById('title').value;
        const subtitle = document.getElementById('subtitle').value;
        var editorContent = quill.root.innerHTML;
        previewTitle.innerText = title;
        quillpreview.clipboard.dangerouslyPasteHTML(editorContent);

        var previewModal = new bootstrap.Modal(document.getElementById('previewModal'));
        previewModal.toggle();
    });

    var figcaptionBtn = document.querySelector('#figcaption-btn');
    figcaptionBtn.addEventListener('click', function() {
        var selectedText = quill.getText(quill.getSelection());
        if(selectedText && selectedText.trim() !== "") {
            var cursorPosition = quill.getSelection().index;
            var figureCount = countImgTagsBeforeCursor(quill, cursorPosition);
            quill.deleteText(cursorPosition, selectedText.length);
            quill.insertText(cursorPosition, `Fig-${figureCount}: ${selectedText}`, {
                color: 'grey',
                italic: true
            });
            quill.setSelection(cursorPosition + `Fig-${figureCount}: ${selectedText}`.length);
        }
    });

    function countImgTagsBeforeCursor(quill, cursorIndex) {
        var contentBeforeCursor = quill.getContents(0, cursorIndex);
        var imgCount = 0;
        contentBeforeCursor.ops.forEach(function (op) {
            if (op.insert && op.insert.image) {
            imgCount++;
            }
        });

        return imgCount;
    }



quill.on('editor-change', function(eventName, ...args) {
    if (eventName === 'text-change') {
        quill.root.querySelectorAll('img').forEach(function(image) {
            if (image.src.startsWith('data:')) { // a base64 image data, then upload to server and get a url
                // Handle the image asynchronously
                handleImageUpload(image);
            }
        });
    }
});

function handleImageUpload(image) {
    const base64Data = image.getAttribute('src').split(',')[1];
    const blob = b64toBlob(base64Data, 'image/png');
    const formData = new FormData();
    formData.append('image', blob, 'image.png'); // 'image' is the field name

    // upload the image asynchronously
    fetch('/upload-image', {
        method: 'POST',
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
        // Replace base64 image source with the server response URL
        image.src = data.imageUrl;
    })
    .catch(error => console.error('Error uploading image:', error));
}

function b64toBlob(b64Data, contentType = '', sliceSize = 512) {
    const byteCharacters = atob(b64Data);
    const byteArrays = [];

    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);

        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }

        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
    }

    return new Blob(byteArrays, { type: contentType });
}

    var selectedText;


    function saveBlog(isUpdateOperation, blogid) {
        const title = document.getElementById('title').value;
        const subtitle = document.getElementById('subtitle').value;
        const tags = document.getElementById('tags').value;
        var body = quill.root.innerHTML;

        const jsonData = {
                title: title,
                subtitle: subtitle,
                body: body,
                tags: tags
        };

        if(isUpdateOperation) {
            //Path: /index/blogs/:id/edit
            fetch('/index/blogs/' + blogid + '/edit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                window.location.href = '/index?id=' + data.savedblogid;

            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                // Handle error, if needed
            });

        } else { // save as new
            fetch('/index/saveblog', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                window.location.href = '/index?id=' + data.savedblogid;

            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                // Handle error, if needed
            });
        }

        
    }

    function cancel(blogid) {
        if(blogid) {
            window.location.href = '/index?id=' + blogid;
        } else {
            window.location.href = '/homepage';
        }
    }


  </script>
</body>
</html>
 