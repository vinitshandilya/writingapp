<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://kit.fontawesome.com/03adeb66cc.js" crossorigin="anonymous"></script>
  <title>The writing app</title>

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Hedvig+Letters+Serif:opsz@12..24&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js" integrity="sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8" crossorigin="anonymous"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js" integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05" crossorigin="anonymous"
        onload="renderMathInElement(document.body);"></script>
        

  <style>
    .left-section {
        height: 100vh;
        padding: 15px;
    }

    .mid-section {
        height: 100vh;
        padding: 15px;
    }

    .right-section {
        height: 100vh;
        padding: 15px;
    }

    .ql-editor {
        border: none !important;
        box-shadow: none !important;
        outline: none !important;
        max-height: none;
        height: auto !important; 
        overflow-y: hidden;
            font-size: medium;
            font-family: 'Hedvig Letters Serif', serif;
            padding: 0;
         }

    .ql-container {
        border: none !important;
        box-shadow: none !important;
        outline: none !important;
        max-height: none;
        height: auto !important; 
        overflow-y: hidden;
            font-size: medium;
            font-family: 'Hedvig Letters Serif', serif;
            padding: 0;
    }

    .ql-toolbar {
        border: none !important;
        box-shadow: none !important;
        outline: none !important;
    }

    .custom-textarea-title {
        border: none;
        resize: none;
        font-size: 35px;
        font-weight: bolder;
    }

    .custom-textarea-title::placeholder {
        border: none;
        resize: none;
        font-size: 35px;
        font-weight: bold;
        color: rgb(179, 173, 173);
    }

    .custom-textarea-title:focus {
        border:none;
        box-shadow:none;
        outline: none !important;
    }

    .custom-textarea-subtitle {
        border: none;
        resize: none;
        font-size: 20px;
    }

    .custom-textarea-subtitle::placeholder {
        border: none;
        resize: none;
        font-size: 20px;
        color: rgb(179, 173, 173);
    }

    .custom-textarea-subtitle:focus {
        border:none;
        box-shadow:none;
        outline: none !important;
    }

    .custom-textarea-tags {
        border: none;
        resize: none;
        font-size: 15px;
    }
            
    .custom-textarea-tags::placeholder {
        border: none;
        resize: none;
        font-size: 15px;
    }

    .custom-textarea-tags:focus {
        border:none;
        box-shadow:none;
        outline: none !important;
    }

    .popup-input {
        border: none;
        resize: none;
        font-size: 15px;
    }
            
    .popup-input::placeholder {
        border: none;
        resize: none;
        font-size: 15px;
    }

    .popup-input:focus {
        border:none;
        box-shadow:none;
        outline: none !important;
    }

    .btn-success {
        background-color: #1c4175;
        border-color: #1c4175;
    }

    .btn-primary {
        background-color: #4287f5;
        border-color: #4287f5;
    }

    .btn-primary:hover {
        background-color: #1c4175;
        border-color: #1c4175;
        color: #fff;
    }

    .btn-secondary {
        background-color: transparent;
        border-color: #1c4175;
        color: #1c4175;
    }

    .btn-success:hover,
    .btn-success:focus {
        background-color: #1c4175;
        border-color: #1c4175;
        color: #fff;
    }

    .footnote {
        color: #999;
    }

    #preview {
        margin-top: 20px;
    }

    .ql-footnote {
        color: #999;
        position: relative;
        cursor: help;
    }

    .ql-footnote:hover::after {
        content: attr(fntitle);
        display: block;
        position: absolute;
        left: 100%;
        top: 0;
        width: 600px;
        max-width: 300px;
        white-space: normal;
        word-wrap: break-word;
        padding: 0.5em;
        background: #ffffff;
        border: 1px solid #d7d0d0;
        box-shadow: 2px 2px 5px rgba(41, 41, 41, 0.2);
        z-index: 1;
        border-radius: 15px;
        font-size: 13px;
        color: #333;
        line-height: 1.4;
    }

    .hidden {
        display: none;
    }

    .image-container {
      padding: 10px;
    }

  </style>


</head>
<body>

    <div class="container-fluid">
        <div class="row">

            <div class="col-md-8 mx-auto">

                <% if (blog !== 'undefined' && blog !== null) { %>
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-title" id="title" name="title" rows="1" placeholder="Title"><%= blog.title %></textarea>
                    </div>
        
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-subtitle" id="subtitle" name="subtitle" rows="1" placeholder="Enter Subtitle..."><%= blog.subtitle %></textarea>
                    </div>
        
                    <div class="editor" id="editor"><%- blog.body || '' %></div>
        
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-tags" id="tags" name="tags" rows="1" placeholder="Add comma separated tags (Optional)"><%= blog.tags && blog.tags.length > 0 ? blog.tags.join(', ') : '' %></textarea>
                    </div>
        
                    <button class="btn btn-primary" id="previewButton" onclick="loadPreview()">Preview</button>
        
                    <button type="button" class="btn btn-success" onclick="saveBlog(true, '<%= blog.id %>')">Publish Changes</button>
        
                    <button type="button" class="btn btn-secondary" onclick="cancel('<%= blog.id %>')">Cancel</button>

                    <div class="preview" id="preview"></div>

                    <div id="popup" class="hidden">
                        <input class="popup-input" type="text" id="userInput" name="user_input" placeholder="Enter footnote...">
                        <button class="btn btn-success" id="footnoteSubmit">Add</button>
                    </div>


                <% } else { %>
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-title" id="title" name="title" rows="1" placeholder="Enter Title..."></textarea>
                    </div>
        
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-subtitle" id="subtitle" name="subtitle" rows="1" placeholder="Enter Subtitle..."></textarea>
                    </div>
        
                    <div class="editor" id="editor"></div>
        
                    <div class="mb-3">
                        <textarea class="form-control custom-textarea-tags" id="tags" name="tags" rows="1" placeholder="Add comma separated tags (Optional)"></textarea>
                    </div>
        
                    <button class="btn btn-primary" id="previewButton" onclick="loadPreview()">Preview</button>
        
                    <button type="button" class="btn btn-success" onclick="saveBlog(false, '')">Publish</button>
        
                    <button type="button" class="btn btn-secondary" onclick="cancel('')">Cancel</button>

                    <div class="preview" id="preview"></div>

                    <div id="popup" class="hidden">
                        <input class="popup-input" type="text" id="userInput" name="user_input" placeholder="Enter footnote...">
                        <button class="btn btn-success" id="footnoteSubmit">Add</button>
                    </div>


                <% } %>
        </div>
    </div>

  <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>


  <script>

    var htmldata;

    // Initialize Quill for the preview without a toolbar (readOnly)
    var quillpreview = new Quill('#preview', {
        readOnly: true,
        theme: 'snow'
    });

    var previewContainer = document.querySelector('#preview');
    var previewToolbar = previewContainer.previousElementSibling;

    if (previewToolbar && previewToolbar.classList.contains('ql-toolbar')) {
        previewToolbar.parentNode.removeChild(previewToolbar);
    }



    const customButton = document.createElement('button');
    customButton.className = 'ql-custom-button';

    var Block = Quill.import('blots/block');

    class FootnoteBlot extends Block {
        static blotName = 'footnote';
        static tagName = 'footnote';
    }

    Quill.register(FootnoteBlot);

    var toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
        ['blockquote', 'code-block'],

        //[{ 'header': 1 }, { 'header': 2 }],               // custom button values
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
        [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
        [{ 'direction': 'rtl' }],                         // text direction

        // [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

        [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
        [{ 'font': [] }],
        [{ 'align': [] }],

        ['clean'],                                         // remove formatting button

        ['link', 'image', 'video', 'formula', { 'custom-button': customButton }] 
    ];

    var quill = new Quill('#editor', {
    modules: {
        toolbar: {
            container: toolbarOptions,
            handlers: {
                'custom-button': function() {
                    insertFootnote();
                }
            }
        }
    },
    theme: 'snow'
});

quill.on('editor-change', function(eventName, ...args) {
    if (eventName === 'text-change') {
        quill.root.querySelectorAll('img').forEach(function(image) {
            if (image.src.startsWith('data:')) { // a base64 image data, then upload to server and get a url
                // Handle the image asynchronously
                handleImageUpload(image);
            }
        });
    }
});

function handleImageUpload(image) {
    const base64Data = image.getAttribute('src').split(',')[1];
    const blob = b64toBlob(base64Data, 'image/png');
    const formData = new FormData();
    formData.append('image', blob, 'image.png'); // 'image' is the field name

    // upload the image asynchronously
    fetch('/upload-image', {
        method: 'POST',
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
        // Replace base64 image source with the server response URL
        image.src = data.imageUrl;
        console.log(`image url: ${data.imageUrl}`);
    })
    .catch(error => console.error('Error uploading image:', error));
}

function b64toBlob(b64Data, contentType = '', sliceSize = 512) {
    const byteCharacters = atob(b64Data);
    const byteArrays = [];

    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);

        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }

        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
    }

    return new Blob(byteArrays, { type: contentType });
}


    const popup = document.getElementById('popup');
    const footnoteSubmit = document.getElementById('footnoteSubmit');



    var selectedText;

    function insertFootnote() {
        selectedText = quill.getSelection();
        if(selectedText.length > 0) {
            popup.classList.toggle('hidden');
        } 
    }

    footnoteSubmit.addEventListener('click', () => {
          const userInput = document.getElementById('userInput').value;
          popup.classList.toggle('hidden');

          if(selectedText.length > 0) {
            console.log('selectedText: ' + selectedText);
            quill.insertText(selectedText.index + selectedText.length, `[^${userInput}]`, 'user');
            quill.formatText(
            selectedText.index + selectedText.length, // starting index
            userInput.length + 3, // length of inserted text + brackets
            {
                color: 'grey', // maintain grey color
                font: 'Times New Roman', // set font family
                size: 15, // set font size
            }
            );
            // var previewDiv = document.getElementById('preview');
            var editorContent = quill.root.innerHTML;
            quillpreview.clipboard.dangerouslyPasteHTML(recomputeRender(editorContent));
          }

        });

    function loadPreview() {
        var editorContent = quill.root.innerHTML;
        quillpreview.clipboard.dangerouslyPasteHTML(recomputeRender(editorContent));
    }

    function recomputeRender(domstr) {
        var counter = 1;
        var regex = /\[\^(.*?)\]/g; // Capture the text inside `[^]` using capturing group
        var previewContent = domstr.replace(regex, function(match, customFootnote) {
            return `
            <span class="ql-footnote" fntitle="${customFootnote}">
                <sub>
                    <a href="#">[${(counter++)}]</a>
                </sub>
            </span>
            `;
        });
        console.log(`recompute render output: ${previewContent}`);
        return replaceImgWithDivs(previewContent);
    }

    function replaceImgWithDivs(htmlString) {
    var imgRegex = /<img([^>]*)>/g;

    var modifiedHtml = htmlString.replace(imgRegex, function(match, imgAttributes) {
            return '<div class="row justify-content-center">' +
                    '<div class="col-md-11 mx-auto">' +
                        '<div class="image-container text-center">' +
                            '<img class="img-fluid" style="max-height: 100%;"' + imgAttributes + '>' +
                        '</div>' +
                    '</div>' +
                '</div>';
        });

        console.log(`After image manipulation: ${modifiedHtml}`);
        htmldata = modifiedHtml;

        return modifiedHtml;
    }

    quill.on('editor-change', function(eventName, ...args) {
        if (eventName === 'text-change') {
            var [delta, oldDelta, source] = args;
            if (source === 'user') {
                // Handle changes made by the user
            }
        }

        if (eventName === 'selection-change') {
            var [range, oldRange, source] = args;
            if (range && source === 'user' && quill.getFormat(range.index, 1)['footnote']) {
                
            }
        }
    });


    function saveBlog(isUpdateOperation, blogid) {
        console.log(isUpdateOperation);
        console.log(blogid);
        const title = document.getElementById('title').value;
        const subtitle = document.getElementById('subtitle').value;
        const tags = document.getElementById('tags').value;
        var body = htmldata ? htmldata : recomputeRender(quill.root.innerHTML);

        const jsonData = {
                title: title,
                subtitle: subtitle,
                body: body,
                tags: tags
        };

        if(isUpdateOperation) {
            //Path: /index/blogs/:id/edit
            fetch('/index/blogs/' + blogid + '/edit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Blog saved successfully:', data.savedblogid);
                window.location.href = '/index?id=' + data.savedblogid;

            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                // Handle error, if needed
            });

        } else { // save as new
            fetch('/index/saveblog', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Blog saved successfully:', data.savedblogid);
                window.location.href = '/index?id=' + data.savedblogid;

            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                // Handle error, if needed
            });
        }

        
    }

    function cancel(blogid) {
        if(blogid) {
            window.location.href = '/index?id=' + blogid;
        } else {
            window.location.href = '/homepage';
        }
    }


  </script>
</body>
</html>
 